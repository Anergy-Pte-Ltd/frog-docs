.. include:: /shared/common.rst

######################
Scheme Module Overview
######################

Introduction
============

This is a **NEW** module. The module is intended to provide an ability to create coding schemes for business object
identifiers for example:

- Project Numbers
- Quotation Numbers
- Work Number (or Work ID)
- Document Numbers
- Plant Tag Numbers
- Part Numbers
- Product Codes

Overview
========

.. mermaid::

    flowchart LR
        subgraph AM[model]
            SM[scheme.mixin]
        end
        SB[scheme.base]
        SG[scheme.group]
        SG --> SB ----> SM
        SG -. module level .-> SM

Each of the business object identifiers form groups (``scheme.group``). For each of these groups, there can be a number
of different schemes that can apply given that this changes with time (``scheme.base``). An individual record for a
specific model will belong then to a scheme (``scheme.mixin``). This will allow that scheme to supply a code to the
record (field ``code``).

Scheme : ``scheme.base``
========================

Basic Fields
------------

The ``name``, ``description`` and ``targeted_users`` fields are used to provide appropriate descriptors for a given
scheme. ``name`` is mandatory should be a simple shorthand method of describing a scheme. ``description`` can provide
more details about the intended scope and nature of the scheme. Finally, ``targeted_users`` provides the historical
context without adding cruft to the ``description`` and should name the company/situation in which the scheme was
intended for.

The ``regex`` field of ``scheme.base`` defines what a code can be. This is mandatory.

.. warning::

    Please do not create schemes which utilises spaces in any way. It is anticipated that such schemes may result in
    problems when perform ``parsing`` or ``search`` type operations as well as for prefixed schemes.

Scheme Status
-------------

``status`` is one of the following:

- ``future`` - not yet used but being considered for use
- ``current`` - the scheme can be selected and applied
- ``default`` - any new record relying upon the scheme
- ``dormant`` - allowed to be used in new records but not made a 'normal' option to users
- ``closed`` - not to be used in any new records

When a scheme is created, the ``status`` is set to ``future``. Use ``set_current()`` method to switch the scheme on
and to set the ``usage_start_date``. Historical schemes which are loaded by XML records can of course bypass this.
Use the method ``set_closed()`` to finally close the scheme. This will also set the ``usage_end_date``. A ``default``
scheme is deemed to be ``current`` however it may affect the setting of the ``code`` in the inherited
``scheme.mixin`` model.

If a selection list is provided to a user, only ``current`` or ``default`` should be shown. ``dormant`` should really
require some other intervention. ``closed`` and ``future`` should be not permitted to be added.

Scheme Order
------------

Human interpretation of the order of codes may not directly correspond with machine order. For example, is code T101
or T1000 greater? To be able to correctly order the two, a second field is computed and stored with the record.


Sequenced Schemes
-----------------

Most schemes have a logical numbering and therefore ordering. If the ``sequenced`` field of ``scheme.base`` is such
then this scheme is sequenced.

``scheme.mixin`` will also set the default order to ``_code``. This is a version of the code which is modified for
the purposes of ordering in the business logical manner. Hence when records are shown, the ``_code`` field will sort
correctly and determinately.

Prefixed Schemes
----------------

Some schemes actually rely upon another scheme being a prefix to the code. Should a scheme have a prefixing scheme,
this is set using the ``prefix_scheme`` field and choosing another scheme. A check shall be completed to prevent
circular references (using the utility method ``_check_recursion()``). Use the ``prefix_separator`` to define the
separator between the two (or '' if there is no separator). If it is mandatory for the scheme to have at all times
the prefix then set the field ``prefix_mandatory`` to True.


Timed Schemes
-------------

Some schemes generate codes with an element which is time oriented. An example of this is the (at the time of
writing) part number scheme. This uses the form ``1qq-nnnn`` where ``qq`` is the quarter number. For the purposes


Search Functions
----------------

``search(code, strict=True)``
    **returns** None or a record or a recordset depending the number of codes found to exactly (if strict) or partially
    (if not) match an item in the list from ``get_all_codes``

``parse``
    Individual text can be parsed to determine if the text contains any instances which fit the scheme. A mo


