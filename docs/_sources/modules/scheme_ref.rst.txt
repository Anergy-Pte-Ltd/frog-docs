.. include:: /shared/common.rst

###########################
Scheme Module Reference
###########################

Manifest
========

name
    Scheme Module

depends
    ``base``

author
    Anergy

category
    utility

description
    Creates and maintains schemes for providing, verifying and ordering business identifiers (or schemes) for projects,
    products or assets.

Models
======

``scheme.base``
---------------

Base model for all schemes to derive from. This is *not* an *abstract model* but to be inherited to delegates.

::

    ADMINISTRATIVE FIELDS
        name:                               char (name of the scheme)

    OBJECTIVE FIELDS
        description:                        char (full description of the scheme)
        targeted_users:                     char (target of the party using the scheme)
        group:                              Many2One (scheme.group)
        regex:                              char (regular expression for code)
        sequenced:                          boolean (True if the scheme has a sequence)
        sequence_regex:                     char (regular expression for the alphanumeric sequence)
        sequence_char_order:                char (order if for the alphanumeric values in sequence with default 0-9A-Za-z)
        sequence_min_length:                int (number of characters in the sequence)
        sequence_initial_value:             char (value initial sequence
        prefix_mandatory:                   boolean (True if must be prefixed)
        prefix_separator:                   char (default='-', character used to separate prefix from code)
        prefix_scheme:                      scheme.base (check for circular expression)

    SITUATIONAL FIELDS
        status:                             Selection (default, current, dormant, closed)
        usage_start_date:                   date (when was this started to be used)
        usage_end_date:                     date (when was this closed)
        active:                             boolean

    COMPUTED FIELDS
        models:                             list (based on id_fields and separated with commas)
        count:                              integer (count of records which use this scheme)

    UI FIELDS
        kanban_sequence:                    integer (value for the kanban view - and ordering for searches?)

    RELATED FIELDS

    OVERRIDDEN METHODS

    COMPUTE METHODS
        -- FUTURE --                        Method naming scheme to assist if need change to updates etc.

    CHANGE, CREATE AND UPDATE METHODS
        set_as_default:                     Set one record as the default scheme in group
        set_closed:
        close_scheme:                       (Close a scheme down)
        write:                              Override to include updating order_codes if coding changed

        next_code:                          Generate next code in sequence if sequenced
        verify(code):                       Boolean (return if code is valid to scheme)
        search(code):                       Return recordset of matches in aligned models (with option of part matches)
        get_order_code(code):               Provide the order-able code value
        update_order_codes(code):           Update all records of models with the correct order codes
        match(code):                        Return list with all matches from regex
        parse(string):                      Find any possible codes inside the string matching the scheme
        exists(code):                       Checks allied id's of this scheme
        get_all_codes:                      Returns list of all id's managed with this scheme
        get_all:                            Returns recordset of all records with codes managed by this scheme

.. note::

    Status modes include:

    - ``current`` - the scheme can be selected and applied (will appear in selection lists)
    - ``default`` - any new record relying upon the scheme
    - ``dormant`` - allowed to be used in new records but not made a 'normal' option to users
    - ``closed`` - not to be used in any new records

``scheme.group``
----------------

Model for grouping the schemes together logically. Serves to provide ability for creating cascading groups of codes.
For example, document numbering which is extensible in multiple ways.

::

    ADMINISTRATIVE FIELDS
        name:                               Char (name of the group)

    OBJECTIVE FIELDS
        description:                        Complete description of the group
        type:                               Used in determining methods by scheme.base [FUTURE]
        models:                             One2Many (any model which relates to the group via ``scheme.mixin``)
        parent_group:                       Many2One (also add parent support)
            ... add parent support

    COMPUTE FIELDS
        count_subgroups:                    Integer (number of subgroups under this)
        count_schemes:                      Integer (number of non-closed schemes under this group including sub-groups)
        count_records:                      Integer (total records in this group including sub-groups)

    METHODS
        get_group_schemes:                  Recordset of the schemes belonging to group
        get_group_default:                  Find which record is currently set as the default

``scheme.mixin``
----------------

To be added to models which will use a scheme for their codes. This is a *model.abstract* class.

::

    ADMINISTRATIVE FIELDS
        code:                               Char (In addition to the name field)
        scheme:                             Many2One (scheme.base)

    @api.model
        scheme_group:                       Many2One (which group does the model belong to)

    COMPUTE FIELDS
        _code:                              Char (code after being ordered - stored)
        _alias_codes:                       Char (comma separated list of previous codes)

    OVERRIDDEN METHODS
        get_name():                         Return code and name together

    METHODS
        set_code(scheme):                   Will set the scheme and code (if not yet set)
        change_scheme(newScheme):           Changes the scheme by either reuse _alias_code and put existing code in
                                            _alias_codes


Security
========

``SchemeViewers`` can read and view ``scheme.base`` and ``scheme.group`` records

``SchemeManagers`` can also create and update ``scheme.base`` and ``scheme.group`` records


Actions and Menus
=================

Menu items for this are to be accessible through the settings app.

Window Actions:

- ``scheme_view_all``: View of all schemes
- ``scheme_groups_view_all``: View of all scheme groups

Server Actions

- ``reorder_scheme``: updates the ``_code`` field for that particular scheme

Views
=====

- Kanban on ``scheme.base`` based on group - ordered by status and user requirements
    - Kanban cards to show group, name and count
- Form view of an individual scheme also showing linked records

Migrations
==========

Some affected modules may use their codes as part of the names or titles. Data will need to be migrated to move all
codes into the ``code`` field.

Initial Data
============

Legacy Jobs
-----------

The following group of records needs to be uploaded as records in the new database.

::

    GROUP = project.project

    Order   Name    Description                         Target                                  Start       End
    1       Znnnn   Original C Jobs (pre 2001)          All Ansac Work                          1995        2001
    2       Knnn    Kiln jobs                           Kiln Work                               2001        2010
    3       Tnnnn   Thermal Processing                  Thermal Processing Work                 2010        2021
    4       aaannn  Anergy UK Jobs                      Anergy UK Jobs                          2011        2013
    5       Mnnn    Mechanical jobs                     Mech Fab Work (dormant)                 2001        2019
    6       Vnnnn   Valve jobs                          Valve work                              2001        2010
    7       Snnnnn  Spares jobs                         Spares work                             2001        2021



Testing
=======

Model ``scheme.group`` testing

- ability to create and update group
- create hierarchy of groups
- perform a group led search function at both root, group and sub-group level
- perform security group checking on view functions

Model ``scheme.base`` testing

- create and update working
- perform a migration of existing data in the test database to the ``code`` field
- correctly verify a range of potential codes against multiple schemes
- determine the next in a code scheme sequence
- view, create and update a schema through correct menus
- reorder codes in a recordset
- search for a record in a recordset
- parse text to find potential codes

Model ``scheme.mixin`` testing

- Add the ``mixin`` to a code
- Check that the ``code`` is correctly added to a model
- Work out how the ``create()`` and ``write()`` work to sort out codes


Additional Notes
================

Pre-implementation
------------------

The implementation phase is will not add ``scheme.mixin`` as yet to any existing modules. This will be performed in a
separate module Before
- work id's



During Implementation
---------------------

Post Implementation
-------------------

.. note::

    It is expected that the ``scheme.base`` will require extending if the basic regular expression model does not
    work well for newer models. For example, the current model possibly does not fully tackle all document numbering
    possibilities into the future.

    Also, there is still the need to garner specific metadata from the coding of any particular scheme. For example
    in the case of WBS metadata. On this last point, this may actually need to be written into the models into which
    this data will end up.